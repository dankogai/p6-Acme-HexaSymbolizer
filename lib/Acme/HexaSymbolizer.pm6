use v6;

unit class Acme::HexaSymbolizer;

has Str %!dict;

submethod BUILD() {
    my %h = (
        "\x00" => <~ ~>,
        "\x01" => <( )>,
        "\x02" => <~ : 0 ( ^>,
        "\x03" => <~ ) ^ 0 :>,
        "\x04" => <4 0>,
        "\x05" => <0 4 ( )>,
        "\x06" => <: ^ 4 ~ (>,
        "\x07" => <~ ) 4 : ^>,
        "\x08" => <^ ( ~>,
        "\x09" => <~ ^ )>,
        "\x0A" => <: 0>,
        "\x0B" => <: 0 ) (>,
        "\x0C" => <~ ( ^ 4 0>,
        "\x0D" => <) ~ ^ 0 4>,
        "\x0E" => <: 4>,
        "\x0F" => <) ( : 4>,
        "\x10" => <^ ~ 0>,
        "\x11" => <^ ~ ) 0 (>,
        "\x12" => <: (>,
        "\x13" => <) :>,
        "\x14" => <4 ~ ^>,
        "\x15" => <^ 4 ( ) ~>,
        "\x16" => <: 4 ( 0>,
        "\x17" => <) : 4 0>,
        "\x18" => <0 (>,
        "\x19" => <) 0>,
        "\x1A" => <^ ~ :>,
        "\x1B" => <~ ( : ^ )>,
        "\x1C" => <4 (>,
        "\x1D" => <4 )>,
        "\x1E" => <: 4 ^ 0 ~>,
        "\x1F" => <^ : ~ 0 ) 4 (>,
        "\x20" => <~ ^>,
        "\x21" => <~ ( ) ^>,
        "\x22" => <: 0 (>,
        "\x23" => <: 0 )>,
        "\x24" => <0 ^ 4 ~>,
        "\x25" => <^ 4 ) ( 0 ~>,
        "\x26" => <: ( 4>,
        "\x27" => <: ) 4>,
        "\x28" => <(>,
        "\x29" => <)>,
        "\x2A" => <~ : ^ 0>,
        "\x2B" => <) ( : ~ 0 ^>,
        "\x2C" => <( 4 0>,
        "\x2D" => <4 0 )>,
        "\x2E" => <: ~ 4 ^>,
        "\x2F" => <( : ) 4 ^ ~>,
        "\x30" => <0>,
        "\x31" => <( 0 )>,
        "\x32" => <( : ^ ~>,
        "\x33" => <^ : ) ~>,
        "\x34" => <4>,
        "\x35" => <) ( 4>,
        "\x36" => <4 0 : ( ~ ^>,
        "\x37" => <4 : ^ ) 0 ~>,
        "\x38" => <^ ( ~ 0>,
        "\x39" => <) ~ 0 ^>,
        "\x3A" => <:>,
        "\x3B" => <: ( )>,
        "\x3C" => <4 ^ ~ (>,
        "\x3D" => <) 4 ~ ^>,
        "\x3E" => <: 0 4>,
        "\x3F" => <4 : ) 0 (>,
        "\x40" => <~ 0 : 4>,
        "\x41" => <4 ~ ) ( 0 :>,
        "\x42" => <( ^ 4>,
        "\x43" => <) 4 ^>,
        "\x44" => <~ :>,
        "\x45" => <~ : ) (>,
        "\x46" => <^ 0 (>,
        "\x47" => <) 0 ^>,
        "\x48" => <: 0 ( ^ 4>,
        "\x49" => <^ : ) 4 0>,
        "\x4A" => <4 ~>,
        "\x4B" => <4 ) ~ (>,
        "\x4C" => <: ( ^>,
        "\x4D" => <^ : )>,
        "\x4E" => <~ 0>,
        "\x4F" => <0 ) ( ~>,
        "\x50" => <^ : 4>,
        "\x51" => <( 4 ) ^ :>,
        "\x52" => <0 ~ ( 4>,
        "\x53" => <~ 0 ) 4>,
        "\x54" => <^ 0 :>,
        "\x55" => <( ^ ) 0 :>,
        "\x56" => <~ (>,
        "\x57" => <~ )>,
        "\x58" => <: 4 ( ~>,
        "\x59" => <4 ) ~ :>,
        "\x5A" => <4 ^ 0>,
        "\x5B" => <^ ) ( 4 0>,
        "\x5C" => <: 0 ( ~>,
        "\x5D" => <0 ~ ) :>,
        "\x5E" => <^>,
        "\x5F" => <( ) ^>,
        "\x60" => <: 0 ^ 4>,
        "\x61" => <^ ( 4 : ) 0>,
        "\x62" => <~ 4 (>,
        "\x63" => <) ~ 4>,
        "\x64" => <: ^>,
        "\x65" => <: ) ^ (>,
        "\x66" => <( ~ 0>,
        "\x67" => <~ ) 0>,
        "\x68" => <~ 0 4 ( :>,
        "\x69" => <4 ~ 0 : )>,
        "\x6A" => <4 ^>,
        "\x6B" => <( ) 4 ^>,
        "\x6C" => <: ~ (>,
        "\x6D" => <: ) ~>,
        "\x6E" => <0 ^>,
        "\x6F" => <) 0 ^ (>,
        "\x70" => <~ : 4>,
        "\x71" => <( : ) ~ 4>,
        "\x72" => <0 4 ^ (>,
        "\x73" => <) ^ 0 4>,
        "\x74" => <: ~ 0>,
        "\x75" => <~ ) 0 : (>,
        "\x76" => <^ (>,
        "\x77" => <) ^>,
        "\x78" => <^ : ( 4>,
        "\x79" => <: ) 4 ^>,
        "\x7A" => <~ 4 0>,
        "\x7B" => <) 4 ( ~ 0>,
        "\x7C" => <^ ( 0 :>,
        "\x7D" => <^ 0 : )>,
        "\x7E" => <~>,
        "\x7F" => <~ ( )>
    );
    %!dict = (
        '0' => "(~(^(''~~'')))",
        '1' => <(~(^(''~~''))) '(' ')'>.pick(*).join('~^'),
        '4' => self!four,
    );
    for %h.kv -> $k, $v {
        unless %!dict{$k}:exists {
            %!dict.push: $k => $v.pick(*).map({ %!dict{$_} // "'$_'" }).join('~^');
        }
    }
}

method symbolize(Str $code) {
    if !self.defined {
        return self.bless.symbolize($code);
    }
    my $encoded = $code.comb.map({
        when /<[\x00 .. \x7F]>/ {
            $_;
        }
        default {
            '\x' ~ .ord.base(16);
        }
    }).join.subst(/ ([ \x22 || \x24 || \x25 || \x40 || \x7b || \x7d ]) /, { '\\' ~ $0 }, :g);
    my $main = self!encode(qq{"$encoded".EVAL});
    return "::({self!encode('&EVAL')})($main)"
}

method !encode(Str $str) {
    return $str.comb.map({ %!dict{$_} }).join('~');
}

method !four() {
    my %h = (
        '1' => <0 ( )>,
        '2' => <^ : ~ (>,
        'N' => <0 ~>,
        'u' => <0 : ~ ( )>,
        'm' => <) : ~>,
        '*' => <0 ^ : ~>,
    );
    my %dict = (
        '0' => "(~(^(''~~'')))",
    );
    for %h.kv -> $k, $v {
        %dict.push: $k => $v.pick(*).map({ %dict{$_} // "'$_'" }).join('~^');
    }
    my $num = 'Num'.comb.map({ %dict{$_} }).join('~');
    my $four = '1*2**2'.comb.map({ %dict{$_} }).join('~');
    return "(~::({$num})({$four}))";
}
