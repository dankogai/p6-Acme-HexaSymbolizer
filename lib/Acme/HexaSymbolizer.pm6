use v6;

unit class Acme::HexaSymbolizer;

has Str %!dict;

submethod BUILD() {
    my %h = (
        "\x00" => <~ ~>,
        "\x01" => <( )>,
        "\x02" => <) 1 : ^ ~>,
        "\x03" => <) 0 : ^ ~>,
        "\x04" => <0 4>,
        "\x05" => <1 4>,
        "\x06" => <( 4 : ^ ~>,
        "\x07" => <) 4 : ^ ~>,
        "\x08" => <( ^ ~>,
        "\x09" => <) ^ ~>,
        "\x0A" => <0 :>,
        "\x0B" => <1 :>,
        "\x0C" => <( 0 4 ^ ~>,
        "\x0D" => <( 1 4 ^ ~>,
        "\x0E" => <4 :>,
        "\x0F" => <0 1 4 :>,
        "\x10" => <0 ^ ~>,
        "\x11" => <1 ^ ~>,
        "\x12" => <( :>,
        "\x13" => <) :>,
        "\x14" => <4 ^ ~>,
        "\x15" => <( ) 4 ^ ~>,
        "\x16" => <) 1 4 :>,
        "\x17" => <( 1 4 :>,
        "\x18" => <) 1>,
        "\x19" => <( 1>,
        "\x1A" => <: ^ ~>,
        "\x1B" => <0 1 : ^ ~>,
        "\x1C" => <( 4>,
        "\x1D" => <) 4>,
        "\x1E" => <0 4 : ^ ~>,
        "\x1F" => <1 4 : ^ ~>,
        "\x20" => <^ ~>,
        "\x21" => <0 1 ^ ~>,
        "\x22" => <) 1 :>,
        "\x23" => <) 0 :>,
        "\x24" => <0 4 ^ ~>,
        "\x25" => <1 4 ^ ~>,
        "\x26" => <( 4 :>,
        "\x27" => <) 4 :>,
        "\x28" => <(>,
        "\x29" => <)>,
        "\x2A" => <0 : ^ ~>,
        "\x2B" => <1 : ^ ~>,
        "\x2C" => <( 0 4>,
        "\x2D" => <) 0 4>,
        "\x2E" => <4 : ^ ~>,
        "\x2F" => <0 1 4 : ^ ~>,
        "\x30" => <0>,
        "\x31" => <1>,
        "\x32" => <( : ^ ~>,
        "\x33" => <) : ^ ~>,
        "\x34" => <4>,
        "\x35" => <0 1 4>,
        "\x36" => <( 0 4 : ^ ~>,
        "\x37" => <( 1 4 : ^ ~>,
        "\x38" => <( 0 ^ ~>,
        "\x39" => <( 1 ^ ~>,
        "\x3A" => <:>,
        "\x3B" => <( ) :>,
        "\x3C" => <( 4 ^ ~>,
        "\x3D" => <) 4 ^ ~>,
        "\x3E" => <0 4 :>,
        "\x3F" => <1 4 :>,
        "\x40" => <0 4 : ~>,
        "\x41" => <1 4 : ~>,
        "\x42" => <( 4 ^>,
        "\x43" => <) 4 ^>,
        "\x44" => <: ~>,
        "\x45" => <0 1 : ~>,
        "\x46" => <) 1 ^>,
        "\x47" => <) 0 ^>,
        "\x48" => <( 0 4 : ^>,
        "\x49" => <( 1 4 : ^>,
        "\x4A" => <4 ~>,
        "\x4B" => <0 1 4 ~>,
        "\x4C" => <( : ^>,
        "\x4D" => <) : ^>,
        "\x4E" => <0 ~>,
        "\x4F" => <1 ~>,
        "\x50" => <4 : ^>,
        "\x51" => <0 1 4 : ^>,
        "\x52" => <( 0 4 ~>,
        "\x53" => <) 0 4 ~>,
        "\x54" => <0 : ^>,
        "\x55" => <1 : ^>,
        "\x56" => <( ~>,
        "\x57" => <) ~>,
        "\x58" => <( 4 : ~>,
        "\x59" => <) 4 : ~>,
        "\x5A" => <0 4 ^>,
        "\x5B" => <1 4 ^>,
        "\x5C" => <) 1 : ~>,
        "\x5D" => <( 1 : ~>,
        "\x5E" => <^>,
        "\x5F" => <( ) ^>,
        "\x60" => <0 4 : ^>,
        "\x61" => <1 4 : ^>,
        "\x62" => <( 4 ~>,
        "\x63" => <) 4 ~>,
        "\x64" => <: ^>,
        "\x65" => <0 1 : ^>,
        "\x66" => <( 0 ~>,
        "\x67" => <) 0 ~>,
        "\x68" => <( 0 4 : ~>,
        "\x69" => <) 0 4 : ~>,
        "\x6A" => <4 ^>,
        "\x6B" => <( ) 4 ^>,
        "\x6C" => <( : ~>,
        "\x6D" => <) : ~>,
        "\x6E" => <0 ^>,
        "\x6F" => <1 ^>,
        "\x70" => <4 : ~>,
        "\x71" => <0 1 4 : ~>,
        "\x72" => <( 0 4 ^>,
        "\x73" => <( 1 4 ^>,
        "\x74" => <0 : ~>,
        "\x75" => <1 : ~>,
        "\x76" => <( ^>,
        "\x77" => <) ^>,
        "\x78" => <( 4 : ^>,
        "\x79" => <) 4 : ^>,
        "\x7A" => <0 4 ~>,
        "\x7B" => <1 4 ~>,
        "\x7C" => <( 0 : ^>,
        "\x7D" => <( 1 : ^>,
        "\x7E" => <~>,
        "\x7F" => <0 1 ~>,
    );
    %!dict = (
        '0' => "(~(^(''~~'')))",
        '1' => <(~(^(''~~''))) '(' ')'>.pick(*).join('~^'),
        '4' => self!four,
    );
    for %h.kv -> $k, $v {
        unless %!dict{$k}:exists {
            %!dict.push: $k => $v.pick(*).map({ %!dict{$_} // "'$_'" }).join('~^');
        }
    }
}

method symbolize(Str $code) {
    if !self.defined {
        return self.bless.symbolize($code);
    }
    my $encoded = $code.comb.map({
        when /<[\x00 .. \x7F]>/ {
            $_;
        }
        default {
            '\x'~.ord.base(16);
        }
    }).join;
    # TODO escape some characters
    my $main = self!encode(qq{"$encoded".EVAL});
    return "::({self!encode('&EVAL')})($main)"
}

method !encode(Str $str) {
    return $str.comb.map({ %!dict{$_} }).join('~');
}

method !four() {
    my %h = (
        '1' => <0 ( )>,
        '2' => <^ : ~ (>,
        'N' => <0 ~>,
        'u' => <0 : ~ ( )>,
        'm' => <) : ~>,
        '*' => <0 ^ : ~>,
    );
    my %dict = (
        '0' => "(~(^(''~~'')))",
    );
    for %h.kv -> $k, $v {
        %dict.push: $k => $v.pick(*).map({ %dict{$_} // "'$_'" }).join('~^');
    }
    my $num = 'Num'.comb.map({ %dict{$_} }).join('~');
    my $four = '1*2**2'.comb.map({ %dict{$_} }).join('~');
    return "(~::({$num})({$four}))";
}
